#include <algorithm>
#include <iostream>
#include <queue>
#include <vector>

using std::cin;
using std::cout;
using std::endl;
using std::queue;
using std::vector;

const int cInf = 1000000000;

struct Edge {
  int to;
  int rev;
  int cap;
  int id;
};

class Graph {
 public:
  explicit Graph(int vertex_count) {
    vertex_count_ = vertex_count;
    adjacency_list_.resize(vertex_count_ + 1);
    visited_.resize(vertex_count_ + 1, false);
    cut_.resize(vertex_count_ + 1, false);
  }

  void AddEdge(int from, int to, int cap, int id) {
    adjacency_list_[from].push_back(
        {to, (int)adjacency_list_[to].size(), cap, id});
    adjacency_list_[to].push_back(
        {from, (int)adjacency_list_[from].size() - 1, cap, id});
  }

  int FindMaxFlow(int source, int sink) {
    int flow = 0;
    while (true) {
      visited_.assign(vertex_count_ + 1, false);
      int p = FindAugmentingPath(source, sink, cInf);
      if (p == 0) {
        break;
      }
      flow += p;
    }
    return flow;
  }

  vector<int> GetCutEdges() const {
    vector<int> result;
    for (int i = 1; i <= vertex_count_; ++i) {
      for (const auto& e : adjacency_list_[i]) {
        if (cut_[i] and !cut_[e.to] and e.id > 0) {
          result.push_back(e.id);
        }
      }
    }
    return result;
  }

  void MarkCutVertices(int source) {
    cut_[source] = true;
    queue<int> q;
    q.push(source);
    while (!q.empty()) {
      int current = q.front();
      q.pop();
      for (const auto& e : adjacency_list_[current]) {
        if (e.cap > 0 and !cut_[e.to]) {
          cut_[e.to] = true;
          q.push(e.to);
        }
      }
    }
  }

 private:
  int vertex_count_;
  vector<vector<Edge>> adjacency_list_;
  vector<bool> visited_;
  vector<bool> cut_;

  int FindAugmentingPath(int current, int sink, int flow) {
    if (current == sink) {
      return flow;
    }
    visited_[current] = true;
    for (auto& e : adjacency_list_[current]) {
      if (!visited_[e.to] and e.cap > 0) {
        int new_flow = std::min(flow, e.cap);
        int augment = FindAugmentingPath(e.to, sink, new_flow);
        if (augment > 0) {
          e.cap -= augment;
          adjacency_list_[e.to][e.rev].cap += augment;
          return augment;
        }
      }
    }
    return 0;
  }
};

void ReadGraph(Graph& graph, int edge_count) {
  for (int i = 0; i < edge_count; ++i) {
    int u;
    int v;
    int c;
    cin >> u >> v >> c;
    graph.AddEdge(u, v, c, i + 1);
  }
}

void PrintResult(int max_flow, const vector<int>& cut_edges) {
  cout << cut_edges.size() << ' ' << max_flow << endl;
  for (int edge : cut_edges) {
    cout << edge << ' ';
  }
  cout << endl;
}

int main() {
  int vertex_count;
  int edge_count;
  cin >> vertex_count >> edge_count;
  Graph graph(vertex_count);
  ReadGraph(graph, edge_count);
  int max_flow = graph.FindMaxFlow(1, vertex_count);
  graph.MarkCutVertices(1);
  vector<int> cut_edges = graph.GetCutEdges();
  PrintResult(max_flow, cut_edges);
}
